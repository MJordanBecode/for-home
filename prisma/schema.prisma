// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  username         String    @unique
  email            String    @unique
  password         String
  token            String?   // Nullable
  token_expiration DateTime? // Nullable
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  // Relations
  roles       UserRole[]
  tasks       Task[]
  notes       Note[]
  projects    Project[]
  events      Event[]
}

model Role {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?

  // Relations
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?

  // Relations
  roles       RolePermission[]
}

model UserRole {
  user_id Int
  role_id Int

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([user_id, role_id])
}

model RolePermission {
  role_id       Int
  permission_id Int

  role       Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@id([role_id, permission_id])
}

model Task {
  id            Int       @id @default(autoincrement())
  title         String
  priorityLevel Priority
  finish        Boolean   @default(false)
  created_at    DateTime  @default(now())
  user_id       Int

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Note {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  category   String
  created_at DateTime @default(now())
  user_id    Int

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Project {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  status      String
  deadline    DateTime
  created_at  DateTime @default(now())
  user_id     Int

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  start_time  DateTime
  end_time    DateTime
  created_at  DateTime @default(now())
  user_id     Int

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum Priority {
  Faible
  Normal
  Prioritaire
}
